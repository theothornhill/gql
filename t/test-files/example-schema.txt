enum DogCommand { SIT, DOWN, HEEL }
type Dog implements Pet {
  name: String!
  nickname: String
  barkVolume: Int
  doesKnowCommand(dogCommand: DogCommand!): Boolean!
  isHousetrained(atOtherHomes: Boolean): Boolean!
  owner: Human
}
interface Sentient {
  name: String!
}
interface Pet {
  name: String!
}
type Alien implements Sentient {
  name: String!
  homePlanet: String
}
type Human implements Sentient {
  name: String!
}
enum CatCommand { JUMP }
type Cat implements Pet {
  name: String!
  nickname: String
  doesKnowCommand(catCommand: CatCommand!): Boolean!
  meowVolume: Int
}
union CatOrDog = Cat | Dog
union DogOrHuman = Dog | Human
union HumanOrAlien = Human | Alien
type Arguments {
  multipleReqs(x: Int!, y: Int!): Int!
  booleanArgField(booleanArg: Boolean): Boolean
  floatArgField(floatArg: Float): Float
  intArgField(intArg: Int): Int
  nonNullBooleanArgField(nonNullBooleanArg: Boolean!): Boolean!
  nonNullListOfBooleanField(nonNullListOfBooleanArg: [Boolean]!) : Boolean!
  listOfNonNullBooleanField(listOfNonNullBooleanArg: [Boolean!]) : Boolean!
  nonNullListOfNonNullBooleanField(nonNullListOfNonNullBooleanArg: [Boolean!]!) : Boolean!
  booleanListArgField(booleanListArg: [Boolean]!): [Boolean]
}
type QueryRoot {
  dog: Dog
  arguments: Arguments
}
type MutationRoot {
  dog: Dog
  arguments: Arguments
}
schema {
  query: QueryRoot
  mutation: MutationRoot
}
